Programa ::= SeqSentencias
Funcion ::= function ID = ID ( Parametros ) SeqSentencias End
Funcion ::= function [ Parametros ] = ID ( Parametros ) SeqSentencias End
Parametros ::= ID , Parametros
Parametros ::= ID
SeqSentencias ::= Sentencia
SeqSentencias ::= Sentencia SeqSentencias
Valor ::= Constante
Valor ::= ID
Valor ::= Matriz
Sentencia ::= Funcion
Sentencia ::= Asignacion
Sentencia ::= LlamadaFuncion
Asignacion ::= ID = Valor
Asignacion ::= ID = LlamadaFuncion
Asignacion ::= [ SeqID ] = LlamadaFuncion
SeqID ::= ID 
SeqID ::= ID , SeqID
LlamadaFuncion ::= ID
LlamadaFuncion ::= ID ( )
LlamadaFuncion ::= ID ( Parametros )
SeqElementos ::= Valor , SeqElementos 
SeqElementos ::= LlamadaFuncion , SeqElementos 
SeqElementos ::= ID , SeqElementos 
SeqElementos ::= Matriz , SeqElementos 
SeqElementos ::= Valor
SeqElementos ::= LlamadaFuncion
SeqElementos ::= ID
Fila ::= SeqElementos ; Fila
Fila ::= SeqElementos ;
Fila ::= SeqElementos 
Matriz ::= [ SeqElementos ]
Matriz ::= [ SeqElementos ; Fila ]
Sentencia ::= Condicional
Sentencia ::= DefFor
Sentencia ::= DefWhile
Sentencia ::= Expresion
DefFor ::= for ID = Valor : Valor SeqSentencias end
DefWhile ::= While Expresion SeqSentencias end
Condicional ::= if ( Expresion ) end
Condicional ::= if ( Expresion ) SeqSentencias end
Condicional ::= if ( Expresion ) SeqSentencias else SeqSentencias end
Condicional ::= if ( Expresion ) SeqSentencias elseif ( Expresion ) SeqSentencias end
Condicional ::= if ( Expresion ) SeqSentencias elseif ( Expresion ) SeqSentencias else SeqSentencias end
Asignacion ::= ID = Expresion
Expresion ::= Operando
Operando ::= True
Operando ::= False
Operando ::= Valor
Operando ::= LlamadaFuncion
Operando ::= ( Operando )
Operando ::= Operando OpLog Expresion
Operando ::= Operando OpLog Operando
Operando ::= Operando OpAritmetico Expresion
Operando ::= Operando OpAritmetico Operando
OpAritmetico ::= +
OpAritmetico ::= -
OpAritmetico ::= *
OpAritmetico ::= .*
OpAritmetico ::= ./
OpAritmetico ::= .\
OpAritmetico ::= /
OpAritmetico ::= \
OpAritmetico ::= .^
OpAritmetico ::= ^
OpLog ::= &&
OpLog ::= ||
OpLog ::= <
OpLog ::= >
OpLog ::= >=
OpLog ::= <=
OpLog ::= ==
OpLog ::= ~=